#ifndef PARALLEL_GA_CHROMOSOME_H
#define PARALLEL_GA_CHROMOSOME_H

#include <vector>
#include "../RunningConfig.h"

struct Chromosome {
private:
    // Array to store genes
    // Each gene is an integer representing the column of a queen in the corresponding row
    int genes[RunningConfig::gene_length];

    // Length of the genes
    int gene_len = RunningConfig::gene_length;

    // The fitness of the chromosome
    // The higher the fitness, the better the chromosome
    int fitness;

    // A hash function to allow chromosome to compare for equality
    friend struct std::hash<Chromosome>;

    /**
     * Generate a random number between 1 and gene_len (inclusive)
     * @param gene_len Upper bound for the random number generation
     * @return A random number
     */
    static int get_random_num(int gene_len);

    /**
     * Calculate the fitness of the chromosome
     * Fitness is calculated based on the number of non-attacking pairs of queens
     */
    void cal_fitness();

public:
    /**
     * Default constructor
     * Only used for init the container and cross_over function
     */
    Chromosome() = default;

    /**
     * Constructor to create a chromosome with random genes
     * @param gene_len Length of the genes
     */
    explicit Chromosome(int gene_len);

    /**
     * Get the fitness of the chromosome
     * @return the value of fitness
     */
    int get_fitness() const {
        return fitness;
    }

    /**
     * Apply the crossover operation between two chromosomes and generate a new chromosome
     * @param other the chromosome to cross over with
     * @return the new chromosome generated by the crossover operation
     */
    Chromosome cross_over(const Chromosome &other) const;

    /**
     * Apply the mutation operation on the chromosome
     */
    void mutate();

    /**
     * print the array of genes
     */
    void show_genes() const;

    /**
     * Show the chessboard representation of the chromosome
     * Each queen is represented by 'Q' and empty spaces by '.'
     */
    void show_chessboard() const;

    /**
     * Overload the equality operator to compare two chromosomes
     * @param other the chromosome to compare with
     * @return true if the two chromosomes are equal, false otherwise
     */
    bool operator==(const Chromosome &other) const;
};

/**
 * Hash function to allow chromosome to compare for equality
 */
namespace std {
    template<>
    struct hash<Chromosome> {
        std::size_t operator()(const Chromosome &c) const {
            std::size_t seed = c.gene_len;
            for (int i = 0; i < c.gene_len; ++i) {
                seed ^= std::hash<int>()(c.genes[i]) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
            }
            return seed;
        }
    };
}

#endif //PARALLEL_GA_CHROMOSOME_H
